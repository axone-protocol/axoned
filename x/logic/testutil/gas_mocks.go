// Code generated by MockGen. DO NOT EDIT.
// Source: cosmossdk.io/store/types (interfaces: GasMeter)

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGasMeter is a mock of GasMeter interface.
type MockGasMeter struct {
	ctrl     *gomock.Controller
	recorder *MockGasMeterMockRecorder
}

// MockGasMeterMockRecorder is the mock recorder for MockGasMeter.
type MockGasMeterMockRecorder struct {
	mock *MockGasMeter
}

// NewMockGasMeter creates a new mock instance.
func NewMockGasMeter(ctrl *gomock.Controller) *MockGasMeter {
	mock := &MockGasMeter{ctrl: ctrl}
	mock.recorder = &MockGasMeterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGasMeter) EXPECT() *MockGasMeterMockRecorder {
	return m.recorder
}

// ConsumeGas mocks base method.
func (m *MockGasMeter) ConsumeGas(arg0 uint64, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConsumeGas", arg0, arg1)
}

// ConsumeGas indicates an expected call of ConsumeGas.
func (mr *MockGasMeterMockRecorder) ConsumeGas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeGas", reflect.TypeOf((*MockGasMeter)(nil).ConsumeGas), arg0, arg1)
}

// GasConsumed mocks base method.
func (m *MockGasMeter) GasConsumed() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasConsumed")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GasConsumed indicates an expected call of GasConsumed.
func (mr *MockGasMeterMockRecorder) GasConsumed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasConsumed", reflect.TypeOf((*MockGasMeter)(nil).GasConsumed))
}

// GasConsumedToLimit mocks base method.
func (m *MockGasMeter) GasConsumedToLimit() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasConsumedToLimit")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GasConsumedToLimit indicates an expected call of GasConsumedToLimit.
func (mr *MockGasMeterMockRecorder) GasConsumedToLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasConsumedToLimit", reflect.TypeOf((*MockGasMeter)(nil).GasConsumedToLimit))
}

// GasRemaining mocks base method.
func (m *MockGasMeter) GasRemaining() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GasRemaining")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GasRemaining indicates an expected call of GasRemaining.
func (mr *MockGasMeterMockRecorder) GasRemaining() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GasRemaining", reflect.TypeOf((*MockGasMeter)(nil).GasRemaining))
}

// IsOutOfGas mocks base method.
func (m *MockGasMeter) IsOutOfGas() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOutOfGas")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOutOfGas indicates an expected call of IsOutOfGas.
func (mr *MockGasMeterMockRecorder) IsOutOfGas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOutOfGas", reflect.TypeOf((*MockGasMeter)(nil).IsOutOfGas))
}

// IsPastLimit mocks base method.
func (m *MockGasMeter) IsPastLimit() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPastLimit")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPastLimit indicates an expected call of IsPastLimit.
func (mr *MockGasMeterMockRecorder) IsPastLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPastLimit", reflect.TypeOf((*MockGasMeter)(nil).IsPastLimit))
}

// Limit mocks base method.
func (m *MockGasMeter) Limit() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockGasMeterMockRecorder) Limit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockGasMeter)(nil).Limit))
}

// RefundGas mocks base method.
func (m *MockGasMeter) RefundGas(arg0 uint64, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefundGas", arg0, arg1)
}

// RefundGas indicates an expected call of RefundGas.
func (mr *MockGasMeterMockRecorder) RefundGas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefundGas", reflect.TypeOf((*MockGasMeter)(nil).RefundGas), arg0, arg1)
}

// String mocks base method.
func (m *MockGasMeter) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockGasMeterMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockGasMeter)(nil).String))
}
